// <auto-generated />
using HangoutsDbLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HangoutsDbLibrary.Migrations
{
    [DbContext(typeof(HangoutsContext))]
    partial class HangoutsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HangoutsDbLibrary.Model.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("GroupNr");

                    b.Property<string>("activity_type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GroupNr");

                    b.ToTable("Activity");

                    b.HasDiscriminator<string>("activity_type").HasValue("activity_base");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.Group", b =>
                {
                    b.Property<string>("GroupNr")
                        .ValueGeneratedOnAdd();

                    b.HasKey("GroupNr");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.GroupAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupAdminForeignKey");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GroupAdminForeignKey")
                        .IsUnique()
                        .HasFilter("[GroupAdminForeignKey] IS NOT NULL");

                    b.ToTable("GroupAdmin");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.UserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.SportsActivity", b =>
                {
                    b.HasBaseType("HangoutsDbLibrary.Model.Activity");

                    b.Property<string>("SportName");

                    b.ToTable("SportsActivity");

                    b.HasDiscriminator().HasValue("activity_sports");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.Activity", b =>
                {
                    b.HasOne("HangoutsDbLibrary.Model.Group", "Group")
                        .WithMany("Activities")
                        .HasForeignKey("GroupNr")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.GroupAdmin", b =>
                {
                    b.HasOne("HangoutsDbLibrary.Model.Group", "Group")
                        .WithOne("Admin")
                        .HasForeignKey("HangoutsDbLibrary.Model.GroupAdmin", "GroupAdminForeignKey");
                });

            modelBuilder.Entity("HangoutsDbLibrary.Model.UserGroup", b =>
                {
                    b.HasOne("HangoutsDbLibrary.Model.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HangoutsDbLibrary.Model.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
